{"version":3,"file":"static/js/500.973725ec.chunk.js","mappings":"mJAsEA,QAlEA,SAAiBA,GAA6C,IAA5C,WAAEC,EAAU,cAAEC,EAAgB,MAAWF,EACzD,MAAM,SACJG,EAAQ,aACRC,EAAY,SACZC,EACAC,WAAW,OAAEC,KACXC,EAAAA,EAAAA,MAaJ,OAXAC,EAAAA,EAAAA,YAAU,KACJP,IACFG,EAAS,WAAyB,OAAbH,QAAa,IAAbA,OAAa,EAAbA,EAAeQ,UACpCL,EAAS,kBAAgC,OAAbH,QAAa,IAAbA,OAAa,EAAbA,EAAeS,iBAC7C,GACC,CAACT,KAOFU,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEC,EAAAA,EAAAA,MAAA,QAAMC,aAAa,MAAMC,SAAUb,GANDc,IACpCjB,EAAWiB,EAAK,IAK6CC,YAAU,EAAAL,SAAA,EACnEC,EAAAA,EAAAA,MAAA,OAAKK,UAAU,QAAON,SAAA,EACpBC,EAAAA,EAAAA,MAAA,OAAKK,UAAU,gBAAeN,SAAA,EAC5BC,EAAAA,EAAAA,MAAA,SAAOM,QAAQ,WAAUP,SAAA,CAAC,cACdF,EAAAA,EAAAA,KAAA,QAAMQ,UAAU,WAAUN,SAAC,UAEvCF,EAAAA,EAAAA,KAAA,YACMT,EAAS,WAAY,CAAEmB,UAAU,IACrCC,KAAK,OACLH,UAAS,+BAAAI,OACPjB,EAAOG,SAAW,QAAU,IAE9Be,YAAY,yBAEblB,EAAOG,WACNE,EAAAA,EAAAA,KAAA,QAAMQ,UAAU,iBAAgBN,SAAC,8BAGrCC,EAAAA,EAAAA,MAAA,OAAKK,UAAU,gBAAeN,SAAA,EAC5BC,EAAAA,EAAAA,MAAA,SAAOM,QAAQ,kBAAiBP,SAAA,CAAC,qBACdF,EAAAA,EAAAA,KAAA,QAAMQ,UAAU,WAAUN,SAAC,UAE9CF,EAAAA,EAAAA,KAAA,eACMT,EAAS,kBAAmB,CAAEmB,UAAU,IAC5CF,UAAS,+BAAAI,OACPjB,EAAOI,gBAAkB,QAAU,IAErCc,YAAY,gCAEblB,EAAOI,kBACNC,EAAAA,EAAAA,KAAA,QAAMQ,UAAU,iBAAgBN,SAAC,wCAMvCF,EAAAA,EAAAA,KAAA,OAAKQ,UAAU,0BAAyBN,UACtCF,EAAAA,EAAAA,KAAA,UAAQQ,UAAU,mBAAkBN,SAAEZ,EAAgB,cAAgB,mBAMhF,C,gFCrBA,QA3CA,WACE,IAAIwB,EAAWC,aAAuB,SAClCC,KAAKC,MAAMF,aAAuB,UAClC,GAEJ,MAAMG,GAAWC,EAAAA,EAAAA,MAQXC,EAAmBA,KACvB,MAAMC,EACJ,iEACF,IAAIC,EAAW,GAKf,IAAK,IAAIC,EAAI,EAAGA,EAFD,EAEaA,IAAK,CAC/B,MAAMC,EAAcC,KAAKC,MAAsBL,GAAhBI,KAAKE,UACpCL,GAAYD,EAAWO,OAAOJ,EAChC,CAEA,OAAOF,CAAQ,EAGjB,OACEnB,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,KAAA,OAAKQ,UAAU,oDAAmDN,UAChEF,EAAAA,EAAAA,KAAA,OAAKQ,UAAU,YAAWN,SAAC,gBAE7BF,EAAAA,EAAAA,KAAA,OAAKQ,UAAU,YAAWN,UACxBF,EAAAA,EAAAA,KAAA,OAAKQ,UAAU,OAAMN,UACnBF,EAAAA,EAAAA,KAAC6B,EAAAA,EAAQ,CAACxC,WA7BoBiB,IACpCQ,EAASgB,KAAK,IAAKxB,EAAMyB,GAAIX,MAC7BL,aAAuB,SAAIC,KAAKgB,UAAUlB,GAC1CI,EAAS,QAAQ,UA+BrB,C","sources":["components/todo-form/TodoForm.tsx","pages/add-todo/AddTodo.tsx"],"sourcesContent":["import \"./TodoForm.css\";\r\nimport { useEffect } from \"react\";\r\nimport { SubmitHandler, useForm } from \"react-hook-form\";\r\n\r\nfunction TodoForm({ submitForm, defaultValues = null }: any) {\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    setValue,\r\n    formState: { errors },\r\n  } = useForm<any>();\r\n\r\n  useEffect(() => {\r\n    if (defaultValues) {\r\n      setValue(\"todoName\", defaultValues?.todoName);\r\n      setValue(\"todoDescription\", defaultValues?.todoDescription);\r\n    }\r\n  }, [defaultValues]);\r\n\r\n  const onSubmit: SubmitHandler<any> = (data) => {\r\n    submitForm(data);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form autoComplete=\"off\" onSubmit={handleSubmit(onSubmit)} noValidate>\r\n        <div className=\"w-100\">\r\n          <div className=\"relative py-1\">\r\n            <label htmlFor=\"todoName\">\r\n              TODO Name <span className=\"required\">*</span>\r\n            </label>\r\n            <input\r\n              {...register(\"todoName\", { required: true })}\r\n              type=\"text\"\r\n              className={`w-100 p-2 mt-1 form-control ${\r\n                errors.todoName ? \"error\" : \"\"\r\n              }`}\r\n              placeholder=\"Enter your TODO Name\"\r\n            />\r\n            {errors.todoName && (\r\n              <span className=\"required-error\">TODO Name is required</span>\r\n            )}\r\n          </div>\r\n          <div className=\"relative py-1\">\r\n            <label htmlFor=\"todoDescription\">\r\n              TODO Description <span className=\"required\">*</span>\r\n            </label>\r\n            <textarea\r\n              {...register(\"todoDescription\", { required: true })}\r\n              className={`w-100 p-2 mt-1 form-control ${\r\n                errors.todoDescription ? \"error\" : \"\"\r\n              }`}\r\n              placeholder=\"Enter your TODO Description\"\r\n            />\r\n            {errors.todoDescription && (\r\n              <span className=\"required-error\">\r\n                TODO Description is required\r\n              </span>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className=\"form-footer text-center\">\r\n          <button className=\"btn-primary mt-2\">{defaultValues ? 'Update TODO' : 'Add TODO'}</button>\r\n        </div>\r\n      </form>\r\n      \r\n    </>\r\n  );\r\n}\r\n\r\nexport default TodoForm;\r\n","import \"./AddTodo.css\";\r\nimport { SubmitHandler } from \"react-hook-form\";\r\nimport TodoForm from \"../../components/todo-form/TodoForm\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nfunction AddTodo() {\r\n  let todoList = localStorage[\"todoList\"]\r\n    ? JSON.parse(localStorage[\"todoList\"])\r\n    : [];\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const onSubmit: SubmitHandler<any> = (data) => {\r\n    todoList.push({ ...data, id: generateRandomId() });\r\n    localStorage[\"todoList\"] = JSON.stringify(todoList);\r\n    navigate(\"/home\");\r\n  };\r\n\r\n  const generateRandomId = () => {\r\n    const characters =\r\n      \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n    let randomId = \"\";\r\n\r\n    // Set length explicitly to 8\r\n    const length = 8;\r\n\r\n    for (let i = 0; i < length; i++) {\r\n      const randomIndex = Math.floor(Math.random() * characters.length);\r\n      randomId += characters.charAt(randomIndex);\r\n    }\r\n\r\n    return randomId;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"d-flex justify-content-between align-items-center\">\r\n        <div className=\"page-head\">Add TODO</div>\r\n      </div>\r\n      <div className=\"container\">\r\n        <div className=\"todo\">\r\n          <TodoForm submitForm={onSubmit} />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default AddTodo;\r\n"],"names":["_ref","submitForm","defaultValues","register","handleSubmit","setValue","formState","errors","useForm","useEffect","todoName","todoDescription","_jsx","_Fragment","children","_jsxs","autoComplete","onSubmit","data","noValidate","className","htmlFor","required","type","concat","placeholder","todoList","localStorage","JSON","parse","navigate","useNavigate","generateRandomId","characters","randomId","i","randomIndex","Math","floor","random","charAt","TodoForm","push","id","stringify"],"sourceRoot":""}